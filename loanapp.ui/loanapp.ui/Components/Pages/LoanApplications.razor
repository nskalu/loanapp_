@page "/loanapplications"
@rendermode InteractiveServer
@using System.Net
@using loanapp.Shared.Enums
@using loanapp.Shared.Interfaces
@using loanapp.application.Commands
@using loanapp.application.Queries.Loans
@using MediatR
@inject IMediator Mediator
@inject NavigationManager NavManager

<h3>Loan Applications</h3>

<div class="mb-3">
    <button class="btn btn-success" @onclick="AddNewLoan">Add New</button>
</div>

@if (Applications == null)
{
    <p><em>Loading...</em></p>
}
else if (!Applications.Items.Any())
{
    <p>No loan applications found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Applicant Name</th>
                <th>Amount</th>
                <th>Term</th>
                <th>Interest %</th>
                <th>Status</th>
                <th>Application Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var app in Applications.Items)
            {
                <tr>
                    <td>@app.Id</td>
                    <td>@app.ApplicantName</td>
                    <td>@app.LoanAmount</td>
                    <td>@app.LoanTerm</td>
                    <td>@app.InterestRate</td>
                    <td>@app.LoanStatus</td>
                    <td>@app.ApplicationDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-success me-2"
                                @onclick="() => UpdateStatus(app.Id, LoanStatus.Approved)">
                            Approve
                        </button>
                        <button class="btn btn-sm btn-danger me-2"
                                @onclick="() => UpdateStatus(app.Id, LoanStatus.Rejected)">
                            Reject
                        </button>
                        <button class="btn btn-sm btn-primary me-2"
                                @onclick="() => EditLoan(app.Id)">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-danger"
                                @onclick="() => DeleteLoan(app.Id)">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav>
        <ul class="pagination">
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="PrevPage">Previous</button>
            </li>
            @for (int i = 1; i <= TotalPages; i++)
            {
                <li class="page-item @(CurrentPage == i ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                </li>
            }
            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="NextPage">Next</button>
            </li>
        </ul>
    </nav>
}

@code {
    private GetLoanApplications.Result Applications;
    private int CurrentPage = 1;
    private int PageLength = 2;
    private int TotalPages => (int)Math.Ceiling((double)(Applications?.TotalCount ?? 0) / PageLength);

    
    protected override async Task OnInitializedAsync()
    {
        await LoadPage(CurrentPage);
    }

    private async Task LoadPage(int page)
    {
        CurrentPage = page;

        // Call the query via Mediatr
        var command = new GetLoanApplications.Query
        {
            Page = CurrentPage,
            PageLength = PageLength
        };

        Applications = await Mediator.Send(command);
    }


    private void EditLoan(int id)
    {
        NavManager.NavigateTo($"/updateloan/{id}");
    }

    private async Task DeleteLoan(int id)
    {
        var cmd = new loanapp.application.Commands.Loans.DeleteLoanApplication.Command { Id = id };
        var response = await Mediator.Send(cmd);

        if (response.StatusCode == HttpStatusCode.NoContent || response.StatusCode == HttpStatusCode.OK)
        {
            Applications.Items = Applications.Items.Where(l => l.Id != id).ToList();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.ErrorMessage);
        }
    }

    private async Task PrevPage()
    {
        if (CurrentPage > 1)
            await LoadPage(CurrentPage - 1);
    }

    private async Task NextPage()
    {
        if (CurrentPage < TotalPages)
            await LoadPage(CurrentPage + 1);
    }

    private async Task GoToPage(int page)
    {
        await LoadPage(page);
    }

    private void AddNewLoan()
    {
        NavManager.NavigateTo("/createloan");
    }

    private async Task UpdateStatus(int id, LoanStatus status)
    {
        var cmd = new loanapp.application.Commands.Loans.UpdateLoanStatus.Command
        {
            Id = id,
            LoanStatus = status
        };

        var response = await Mediator.Send(cmd);

        var currentApp = Applications.Items.FirstOrDefault(a => a.Id == id);

        if (response.StatusCode == System.Net.HttpStatusCode.NoContent || response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            // Update the item locally to reflect status change immediately
            currentApp.LoanStatus = status;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.ErrorMessage);
        }
    }

}
